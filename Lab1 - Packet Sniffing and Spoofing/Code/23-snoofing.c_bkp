#include <stdio.h>
#include <pcap.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/ip.h>
#include <arpa/inet.h>
#include "myheader.c"


#define ETHER_ADDR_LEN	6


unsigned short in_cksum (unsigned short *buf, int length)
{

	unsigned short *w = buf;
   int nleft = length;
   int sum = 0;
   unsigned short temp=0;

   while (nleft > 1)  {
       sum += *w++;
       nleft -= 2;
   }

     if (nleft == 1) {
        *(u_char *)(&temp) = *(u_char *)w ;
        sum += temp;
   }

   sum = (sum >> 16) + (sum & 0xffff);  // add hi 16 to low 16 
   sum += (sum >> 16);                  // add carry 
   return (unsigned short)(~sum);

}

void send_raw_ip_packet(struct ipheader* ip)
{
	printf("I am in send packet func\n");
	struct sockaddr_in dest_info;
	int enable = 1;
	//Step1: Create a raw network socket
	int sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);

	//Step2: Set Socket option
	setsockopt(sock, IPPROTO_IP, IP_HDRINCL, &enable, sizeof(enable));

	//Step3: Provide destination information
	dest_info.sin_family = AF_INET;
	dest_info.sin_addr = ip->iph_destip;

	//Step4: Send the packet out
	sendto(sock, ip, ntohs(ip->iph_len),0, (struct sockaddr *)&dest_info, sizeof(dest_info));
	close(sock);
}



void got_packet(u_char *args, const struct pcap_pkthdr *header,const u_char *packet)
{

	 struct ethheader *eth = (struct ethheader*)packet;

	 if(ntohs(eth->ether_type) == 0x0800) 
	 {
		  struct ipheader *ip = (struct ipheader*)(packet + sizeof(struct ethheader));
		 //printf("Source IP: %s\t", inet_ntoa(ip->iph_sourceip));
		 //printf("Destin IP: %s\n", inet_ntoa(ip->iph_destip));

		 int ip_header_len = ip->iph_ihl * 4;

		 if(ip->iph_protocol == IPPROTO_ICMP)
		 {
		 	
		 	struct icmpheader *icmp = (struct icmpheader *) (packet + sizeof(struct ipheader));

		 	//if(icmp->icmp_type!=8)
		 	//	return;

		 	printf("%u\n",icmp->icmp_type);

		 	printf("I am in got_packet if - passed\n");
		 	char buffer[1500];
			memset(buffer, 0, 1500);
			memcpy((char *)buffer, ip,ntohs(ip->iph_len));
			
			struct ipheader *newip = (struct ipheader*)buffer;
			struct icmpheader *newicmp = (struct icmpheader *) (buffer + sizeof(struct ipheader));

			newicmp->icmp_type = 0; //8 is for  request and 0 is for reply
			newicmp->icmp_chksum = 0;
			newicmp->icmp_chksum = in_cksum((unsigned short *)icmp, sizeof(struct icmpheader));

			newip->iph_ttl = 20;
			newip->iph_sourceip = ip->iph_destip;
			newip->iph_destip = ip->iph_sourceip;
			printf("I am about to send ip packet\n");
			send_raw_ip_packet(ip);

		}
	}

	else
		return;
}


void main()
{


	 pcap_t *handle;
	 char errbuf[PCAP_ERRBUF_SIZE];
	 struct bpf_program fp;
	 char filter_exp[] = "icmp";
	 bpf_u_int32 net;

	 handle = pcap_open_live("enp0s3", BUFSIZ,1,1000,errbuf);
	 printf("Step1\n");

	 pcap_compile(handle, &fp, filter_exp, 0, net);
	 pcap_setfilter(handle, &fp);

	 pcap_loop(handle, -1, got_packet, NULL);

	 pcap_close(handle);
}

